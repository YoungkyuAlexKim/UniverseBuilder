# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template for migration file names, e.g. "%%(rev)s_%%(slug)s.py"
file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the 'python-dateutil' package to be installed.
# IANA database names are used for this parameter e.g. 'America/New_York'
# timezone =

# title string desired for environmental script's transaction logs
# default is 'Alembic Transaction'
# transaction_log_title =

# set to 'true' to run the environment script unconditionally,
# even if the database url is not present.
# unconditional_env_script = false

[post_write_hooks]
# post write hooks, separated by commas.
# hooks are named functions declared in the project's env.py file.
# prepended with "hooks:", e.g. "hooks:myhook,hooks:anotherhook"
# hooks =

# options: yoyo, black, isort, autopep8
# tools are run in the order given
# post_write_hooks_tool_opt =

# any additional options for the tools, e.g. mytool.opt=value
# post_write_hooks_mytool_opt =


#
# Logging configuration
#

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S

sqlalchemy.url = sqlite:///scenario_builder.db